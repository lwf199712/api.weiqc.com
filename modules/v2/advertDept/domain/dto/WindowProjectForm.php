<?php
/**
 * Created by PhpStorm.
 * User: F
 * Date: 2019/10/14
 * Time: 15:27
 */

namespace app\modules\v2\advertDept\domain\dto;


use app\modules\v2\advertDept\domain\vo\WindowProjectVo;
use yii\base\Model;
use yii\db\IntegrityException;

class WindowProjectForm extends Model
{
    public const UPDATE = 'update';
    public const CREATE = 'create';

    public $scenario;

    /** @var int */
    public $id;
    /** @var string */
    public $product_name;
    /** @var int */
    public $data_time;
    /** @var string */
    public $account_and_id;
    /** @var string */
    public $delivery_platform;
    /** @var string */
    public $video_name;
    /** @var string */
    public $responsible_person;
    /** @var string*/
    public $voArr;
    /** @var float */
    public $consume;
    /** @var float */
    public $total_turnover;
    /** @var float */
    public $real_turnover;
    /** @var float */
    public $transaction_data;
    /** @var integer */
    public $period;

    public function rules()
    {
        return [
            [['product_name', 'data_time', 'account_and_id', 'delivery_platform', 'video_name', 'responsible_person'], 'required'],
            [['product_name', 'data_time', 'account_and_id', 'delivery_platform', 'video_name', 'responsible_person'], 'string'],
            ['delivery_platform', 'in', 'range' => ['MVEBackstage', 'WISBackstage', 'WISXiaoXi']],
            ['id', 'integer'],
            ['voArr', 'string', 'on' => self::CREATE],
            [['consume', 'total_turnover', 'real_turnover', 'transaction_data', 'period'], 'requiredByASpecial', 'on' => self::UPDATE],
            [
                ['product_name', 'data_time', 'account_and_id', 'delivery_platform', 'video_name', 'responsible_person', 'id', 'consume', 'total_turnover', 'real_turnover', 'transaction_data', 'period']
                , 'required', 'on' => self::UPDATE
            ],
        ];
    }

    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'product_name' => '产品名称',
            'data_time' => '日期',
            'account_and_id' => '账号+淘宝ID',
            'delivery_platform' => '投放平台',
            'video_name' => '视频名称',
            'responsible_person' => '负责人',
            'voArr' => '交易数据',
        ];
    }

    /**
     * @return $this
     * @throws IntegrityException
     * author: pengguochao
     * Date Time 2019/10/16 14:03
     */
    public function consumeData(): self
    {
        if ($this->validate()){
            $this->setAttributes(['data_time' => strtotime($this->getAttributes(['data_time'])['data_time'])]);
            $windowProjectVo = new WindowProjectVo();
            $voArr = json_decode($this->getAttributes(['voArr'])['voArr'], true);
            if (!$voArr){
                throw new IntegrityException('交易数据不能为空');
            }
            foreach ($voArr as $value){
                $windowProjectVo->setAttributes($value);
                if ($windowProjectVo->validate() === false) {
                    throw new IntegrityException('输入数据验证错误', $this->getErrors());
                }
            }
            return $this;
        }
        throw new IntegrityException('输入数据验证错误', $this->getErrors());
    }

    public function requiredByASpecial($attribute): bool
    {
        $data = ['consume' => '消耗', 'total_turnover' => '总成交', 'real_turnover' => '实时成交', 'transaction_data' => '生意参谋成交数据', 'period' => '时间段'];
        $relus = "/^[0-9]*(\.?(\d{1,2}))$/";    //验证正整数或者小数点后一道两位数的小数
        $relusTwo = "/^(?:1?\d|2[0-3])$/";      //验证整数的值是0-23的整数
        if ($attribute!=='period'){
            if(preg_match($relus, (string)$this->getAttributes([$attribute])[$attribute]) !== 1){
                $this->addError($attribute, $data[$attribute] . '的值只能是正整数或者小数点后一道两位数的小数');
                return false;
            }
        }else{
            if(preg_match($relusTwo, (string)$this->getAttributes([$attribute])[$attribute]) !== 1){
                $this->addError($attribute, $data[$attribute] . '的值是0-23的整数');
                return false;
            }
        }
        return true;
    }

    public function setScenario($value)
    {
        parent::setScenario($value); // TODO: Change the autogenerated stub
        return $this;
    }
}